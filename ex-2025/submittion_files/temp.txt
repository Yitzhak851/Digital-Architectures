#----------------------------------------------------------
# Filename: hw_10_code_sol.asm
# Description: Sample assembly code program that sums all the even elements in a given array.
# Creator: Yitzhak Bar or and Alon Cory
# Editor: Yitzhak Bar or and Alon Cory
# Date Created: January 09, 2025
# Last Edited: January 13, 2025
# Purpose: Demonstrates including creator/editor info in comments
#----------------------------------------------------------
# Here is the data section of this program : data-code-block (global-pointer)
#----------------------------------------------------------
.data
start_adrs:             .word 0x10000100    # Address where the array begins
arr_size_adrs:          .word 0x10000000    # Address where the size of the array is stored
sum_even_valus_adrs:    .word 0x10000004    # Address where the sum of even elements will be stored
#----------------------------------------------------------
# Program code starts here : program-code-block (Load data-pointers and process array)
#----------------------------------------------------------
.text
main:
    # Initialize the array elements in memory
    addi $t0, $0, 1                # $t0 = 1
    sw $t0, 0x10000100($zero)      # Store 1 at address 0x10000100
    addi $t0, $0, 2                # $t0 = 2
    sw $t0, 0x10000104($zero)      # Store 2 at address 0x10000104
    addi $t0, $0, 3                # $t0 = 3
    sw $t0, 0x10000108($zero)      # Store 3 at address 0x10000108
    addi $t0, $0, 4                # $t0 = 4
    sw $t0, 0x1000010C($zero)      # Store 4 at address 0x1000010C
    addi $t0, $0, 5                # $t0 = 5
    sw $t0, 0x10000110($zero)      # Store 5 at address 0x10000110

    # Store the size of the array (number of elements = 5)
    addi $t0, $0, 4                # $t0 = 4
    sw $t0, 0x10000000($zero)      # Save the array size at address 0x10000000

    # Load the size of the array into $t0
    lw $t0, 0x10000000($zero)      # $t0 = size_of_array (number of elements)

    # Load the base address of the array into $t1
    lui $t1, 0x1000                # Load upper 16 bits of the base address
    ori $t1, $t1, 0x0100           # Combine with lower 16 bits to form the full address (0x10000100)

    # Initialize the sum to 0
    ori $t2, $0, 0                 # $t2 = 0 (sum accumulator)
#----------------------------------------------------------
# Loop to process each element of the array
#----------------------------------------------------------
loop:
    beq $t0, $0, end_loop          # If the loop counter ($t0) is 0, exit the loop

    # Load the current array element into $t3
    lw $t3, 0($t1)                 # $t3 = M[$t1] (current element of the array)

    # Check if the current element is even
    ori $t4, $t3, 1                # $t4 = $t3 OR 1 (sets the least significant bit)
    beq $t4, $t3, skip_add         # If $t4 == $t3, the number is odd; skip addition

    # Add the current element to the sum if it is even
    add $t2, $t2, $t3              # $t2 = $t2 + $t3 (accumulate even numbers)

skip_add:
    # Move to the next element
    addi $t1, $t1, 4               # Increment the array pointer ($t1) by 4 (next word)
    addi $t0, $t0, -1              # Decrement the loop counter ($t0)

    # Repeat the loop
    j loop                         # Jump back to the start of the loop
#----------------------------------------------------------
end_loop:
    # Store the sum of even elements in the specified address
    sw $t2, 0x10000004($zero)      # M[0x10000004] = $t2 (store the sum of even elements)
#----------------------------------------------------------
